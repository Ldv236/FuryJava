package ru.ldv236.core2.multithreading.synchro;

public class synchro1 {
// С каждым объектом ассоциирована специфичная структура внутри JVM - монитор.
// Когда поток входит в synchronized секцию, у монитора прописывается владелец.
// Это называется захватом монитора.
// Захват происходит на уровне JVM и недоступен программисту напрямую.
//
// Только один поток может владеть монитором. Соответственно только один
// поток может находится в synchronized секции.
//
//    Допустим 2 потока используют этот метод:
// Поток Т1 входит в критическую секцию под охраной объекта lock
// У монитора lock обновится владелец. Теперь это поток Т1
// Другие потоки не могут зайти в критическую секцию, охраняемую объектом lock
// Когда поток Т1 выходит из критической секции, монитор освобождается, поле owner становится пустым
// Теперь следующий поток может его захватить
    private Object lock = new Object();  // объявляем объект синхронизации

    public void smth() {
        synchronized (lock) {             // синхронизируемся по объекту lock
            // критическая секция, сюда может зайти только один поток
        }
    }
}
