package ru.ldv236.core.Cycles;

import java.util.Random;

public class Tasks {
    public static void main(String[] args) {
        task1();
        task2();
        task3();
        task4();
        task5();
        task6();
        task7();
        task8();
        task9();
        task10();
    }

    { //просто условия простых задачек по циклам
//        Задача 1. Вывод чётных чисел от 1 до n
//        Условие: Напишите программу, которая выводит все чётные числа от 1 до заданного числа n.//
//        Пример: Для n = 10, программа должна вывести: 2 4 6 8 10.//
//        Подсказка: Число чётное, если делится на 2 без остатка (i % 2 == 0).//
//            Цель: Использовать цикл for.
//
//        Задача 2. Сумма чисел от 1 до n          ЭТО ПОКАЗАТЬ А СЛЕДУЮЩУЮ ДАТЬ ЛАЙВКОДИНГ
//        Условие: Напишите программу, которая находит сумму всех чисел от 1 до заданного числа n.//
//        Пример: Для n = 5, результат будет 1 + 2 + 3 + 4 + 5 = 15.//
//        Подсказка: Используйте переменную для накопления суммы.//
//            Цель: Использовать цикл while.
//
//        Задача 3. Произведение чисел от 1 до n       ЭТУ ДАТЬ НА ЛАЙВКОДИНГ
//        Условие: Напишите программу, которая вычисляет произведение всех чисел от 1 до заданного числа n.//
//        Пример: Для n = 4, результат будет 1 * 2 * 3 * 4 = 24.//
//        Подсказка: Произведение — это перемножение всех чисел, начиная с 1.//
//        Цель: Использовать цикл for.
//
//        Задача 5. Нахождение наибольшего числа
//        Условие: Напишите программу, которая принимает последовательность положительных чисел, вводимых пользователем,
//        и находит среди них наибольшее. Ввод продолжается до тех пор, пока не будет введено отрицательное число.//
//            Пример: Пользователь вводит: 3 5 7 2 10 -1, программа должна вывести: 10.//
//        Цель: Использовать цикл do-while.
//
//        Задача 6. Таблица умножения
//        Условие: Напишите программу, которая выводит таблицу умножения для числа n от 1 до 10.
//        Цель: Использовать цикл for.
//
//        Задача 7. Проверка на палиндром (числовой)
//        Условие: Напишите программу, которая проверяет, является ли заданное число палиндромом. Палиндром — это число, которое читается одинаково слева направо и справа налево (например, 121, 1221).
//            Пример: Для числа 121, программа должна вывести "палиндром", для числа 123 — "не палиндром".
//            Подсказка: Переверните число и сравните с исходным.
//        Цель: Использовать цикл while.
//
//        Задача 8. Нахождение минимального делителя (кроме 1)
//        Условие: Напишите программу, которая находит минимальный делитель числа n, отличный от 1.
//        Пример: Для числа 35 минимальный делитель, кроме 1, будет 5.
//        Подсказка: Ищите первый делитель, начиная с 2.
//        Цель: Использовать цикл for или while.
//
//        Задача 10. Постепенное уменьшение до 0
//        Условие: Напишите программу, которая выводит числа от заданного числа n до 0 с шагом -1.
//        Пример: Для n = 5, программа должна вывести: 5 4 3 2 1 0.
//        Цель: Использовать цикл do-while.
    }

    static void task1() {
//        Задача 1. Сумма цифр числа
//        Описание: Дано целое положительное число n. Найдите сумму всех его цифр.
//        Пример: Для числа 1234 результатом будет 10 (1 + 2 + 3 + 4 = 10).
//        Подсказка: Используйте операцию остатка от деления на 10 (% 10), чтобы извлечь последнюю цифру числа,
//        и операцию целочисленного деления на 10 (/ 10), чтобы убрать последнюю цифру.

        int n = 1234; // Пример числа
        int sum = 0;

        while (n > 0) {
            sum += n % 10;  // Добавляем последнюю цифру к сумме
            n /= 10;        // Убираем последнюю цифру
        }

        System.out.println("Сумма цифр: " + sum);  // Вывод: 10
    }

    static void task2() {
//        Задача 2. Число, перевёрнутое наоборот
//        Описание: Дано целое положительное число n. Получите число, которое является зеркальной версией
//        исходного числа (цифры в обратном порядке).
//        Пример: Для числа 1234 результатом будет 4321.
//        Подсказка: И снова используйте деление на 10 и остаток от деления для извлечения и добавления цифр в обратном порядке.

        int n = 1234; // Пример числа
        int reversed = 0;

        while (n > 0) {
            int lastDigit = n % 10;      // Получаем последнюю цифру
            reversed = reversed * 10 + lastDigit;  // Добавляем её в новое число
            n /= 10;                     // Убираем последнюю цифру
        }

        System.out.println("Перевёрнутое число: " + reversed);  // Вывод: 4321
    }

    static void task3() {
//        Задача 3. Количество цифр в числе
//        Описание: Дано целое положительное число n. Определите, сколько цифр в этом числе.
//        Пример: Для числа 12345 результат будет 5.
//        Подсказка: Используйте деление на 10 для "уменьшения" числа до тех пор, пока оно не станет равно нулю.
        int n = 12345;  // Пример числа
        int count = 0;

        while (n > 0) {
            n /= 10;  // Убираем последнюю цифру
            count++;  // Увеличиваем счётчик
        }

        System.out.println("Количество цифр: " + count);  // Вывод: 5
    }

    static void task4() {
//        Задача 4. Проверка на простое число
//        Описание: Дано целое положительное число n. Определите, является ли оно простым. Простое число — это число,
//        которое делится только на 1 и само на себя (например, 2, 3, 5, 7, 11).
//        Пример: Для числа 11 результат будет "простое", а для числа 12 — "составное".
//        Подсказка: Для проверки можно делить число на все числа от 2 до √n. Если хоть одно из этих чисел делит
//        данное число нацело, оно составное.
        int n = 11;  // Пример числа
        boolean isPrime = true;

        if (n < 2) {
            isPrime = false;  // Числа меньше 2 не являются простыми
        } else {
            for (int i = 2; i * i <= n; i++) {
                if (n % i == 0) {
                    isPrime = false;  // Найден делитель, число не простое
                    break;
                }
            }
        }

        if (isPrime) {
            System.out.println(n + " — простое число");
        } else {
            System.out.println(n + " — составное число");
        }
    }

    static void task5() {
//        Задача 5. Нахождение наибольшего общего делителя (НОД)
//        Описание: Даны два целых положительных числа a и b. Найдите их наибольший общий делитель (НОД) — это
//        наибольшее число, на которое оба числа делятся без остатка.
//        Пример: Для чисел 12 и 18 НОД будет равен 6.
//        Подсказка: Используйте алгоритм Евклида: пока одно из чисел не станет равно нулю, заменяйте большее число
//        на остаток от деления его на меньшее.
        int a = 12;  // Пример первого числа
        int b = 18;  // Пример второго числа

        while (b != 0) {
            int temp = b;
            b = a % b;  // Остаток от деления
            a = temp;
        }

        System.out.println("НОД: " + a);  // Вывод: 6
    }

    static void task6() {
//        Задача 6. Число, кратное 7
//        Описание: Дано целое положительное число n. Найдите наименьшее число, большее или равное n, которое делится на 7.
//        Пример: Для числа 13 результатом будет 14.
//        Подсказка: Используйте цикл и проверяйте делимость числа на 7.
        int n = 13;  // Пример числа

        while (n % 7 != 0) {
            n++;  // Увеличиваем n до кратного 7
        }

        System.out.println("Ближайшее число, кратное 7: " + n);  // Вывод: 14
    }

    static void task7() {
//        Задача 9. Число обратное числу
//        Описание: Дано положительное дробное число, представленное как x/y (например, 3/4).
//        Найдите обратное ему число (например, для 3/4 результатом будет 4/3).
//        Пример: Для числа 5/2, результат будет 2/5.
//        Подсказка: Используйте переменные для хранения числителя и знаменателя и поменяйте их местами.
        int numerator = 3;  // Числитель
        int denominator = 4;  // Знаменатель

        // Меняем местами числитель и знаменатель
        int temp = numerator;
        numerator = denominator;
        denominator = temp;

        System.out.println("Обратное число: " + numerator + "/" + denominator);  // Вывод: 4/3
    }

    static void task8() {
//        Задача 10. Целочисленные степени двойки
//        Описание: Дано целое положительное число n. Найдите все степени двойки, которые меньше или равны n.
//        Пример: Для числа 20 результатом будут: 1, 2, 4, 8, 16.
//        Подсказка: Используйте цикл для умножения числа 2 на себя до тех пор, пока результат не превысит n.
        int n = 20;  // Пример числа
        int power = 1;

        while (power <= n) {
            System.out.println(power);  // Выводим степень двойки
            power *= 2;  // Умножаем на 2, чтобы получить следующую степень
        }
    }

    static void task9() {
//        Условие задачи FizzBuzz:
//        Дана последовательность чисел от 1 до n. Для каждого числа:
//        Если число кратно 3, выведите "Fizz".
//        Если число кратно 5, выведите "Buzz".
//        Если число кратно и 3, и 5, выведите "FizzBuzz".
//        Если число не кратно ни 3, ни 5, просто выведите само число.
        int n = 15;  // Пример числа

        for (int i = 1; i <= n; i++) {
            if (i % 3 == 0 && i % 5 == 0) {
                System.out.println("FizzBuzz");
            } else if (i % 3 == 0) {
                System.out.println("Fizz");
            } else if (i % 5 == 0) {
                System.out.println("Buzz");
            } else {
                System.out.println(i);
            }
        }

        for (int i = 1; i <= n; i++) {
            String result = "";

            if (i % 3 == 0) {
                result += "Fizz";
            }
            if (i % 5 == 0) {
                result += "Buzz";
            }

            if (result.isEmpty()) {
                System.out.println(i);  // Если не кратно ни 3, ни 5, выводим число
            } else {
                System.out.println(result);  // Выводим либо "Fizz", либо "Buzz", либо "FizzBuzz"
            }
        }
    }

    static void task10() {
        Random rand = new Random();

        int firstAnswer = rand.nextInt(1, 30);
        System.out.println("first answer: " + firstAnswer);
        int secondAnswer = 0;
        int thirdAnswer = 0;

//        while (true) {
//            secondAnswer = rand.nextInt(1, 30);
//            System.out.println("second answer: " + secondAnswer);
//            if (secondAnswer != thirdAnswer) {
//                break;
//            }
//        }
        do {
            secondAnswer = rand.nextInt(1, 30);
            System.out.println("second answer: " + secondAnswer);
        }
        while (secondAnswer == firstAnswer);


//        while (true) {
//            thirdAnswer = rand.nextInt(1, 30);
//            System.out.println("third answer: " + thirdAnswer);
//            if (thirdAnswer != secondAnswer && thirdAnswer != firstAnswer) {
//                break;
//            }
//        }
        do {
            thirdAnswer = rand.nextInt(1, 30);
            System.out.println("third answer: " + thirdAnswer);
        }
        while (thirdAnswer == secondAnswer || thirdAnswer == firstAnswer);


        System.out.println("firstAnswer: " + firstAnswer + ", secondAnswer: " + secondAnswer + ", thirdAnswer: " + thirdAnswer);
    }
}
