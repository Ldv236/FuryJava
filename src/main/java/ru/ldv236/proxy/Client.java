package ru.ldv236.proxy;

public class Client {
    //Проксирование в спринге для транзакций:

//    Проксирование на основе JDK:
//    используется, когда проксируемый объект реализует один или несколько интерфейсов.
//    Spring создает прокси, который реализует те же интерфейсы, что и целевой объект.
//    Этот способ требует, чтобы все взаимодействие с проксируемым объектом осуществлялось через интерфейс.
//    Проксирование на основе CGLIB:
//    используется, когда целевой объект не реализует никаких интерфейсов, и Spring создает подкласс целевого объекта.
//    Это позволяет проксировать вызовы к любому методу, не требуя от целевого класса реализации интерфейса.

//    Аннотация @Transactional позволяет настроить различные аспекты управления транзакцией, такие как:
//
//    propagation: определяет, как транзакции должны распространяться в случае вложенных вызовов.
//    isolation: уровень изоляции транзакции.
//            readOnly: указывает, что транзакция должна быть только для чтения.
//            timeout: время ожидания транзакции.
//            rollbackFor: исключения, вызывающие откат транзакции.
//            noRollbackFor: исключения, не вызывающие откат транзакции.

// и пример как примерно делается в спринге
    public void doSomethingImportant() {
        try {
            // Начало транзакции
            //transactionManager.beginTransaction();

            // Вызов оригинального метода
            //target.doSomethingImportant();

            // Если метод успешно выполнен, подтверждаем транзакцию
            //transactionManager.commit();
        } catch (Exception ex) {
            // В случае исключения пытаемся откатить транзакцию
            //try {
                //transactionManager.rollback();
            //} catch (TransactionException rollbackEx) {
                // Обработка ошибок отката, если они есть
                // Логирование rollbackEx или дополнительные действия
            //}

            // Перебрасываем исключение, чтобы не скрывать ошибку
            throw ex;
        }
    }

    public static void main(String[] args) {
        Subject proxy = new Proxy();
        proxy.request();

        Subject realSubject = new RealSubject();
        realSubject.request();
    }
//    В этом примере, когда метод request() вызывается через объект Proxy,
//    Proxy может выполнить дополнительные действия до и после вызова метода request() объекта RealSubject.
//    В данном случае, preRequest() и postRequest() демонстрируют такие дополнительные действия, например,
//    логирование или проверку безопасности.
//    Этот паттерн часто используется для контроля доступа к объекту,
//    когда непосредственный доступ к нему не желателен или возможен.
}
