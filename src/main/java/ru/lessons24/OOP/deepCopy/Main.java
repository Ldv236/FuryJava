package ru.lessons24.OOP.deepCopy;

public class Main {
    public static void main(String[] args) throws CloneNotSupportedException {
//        Когда речь идет о глубоком копировании объектов в Java, оба подхода — переопределение метода clone()
//        и использование конструкторов копирования — могут быть использованы для достижения этой цели.
//        Однако у каждого из этих подходов есть свои преимущества и недостатки, которые могут сделать один из них
//        предпочтительнее в зависимости от конкретного случая.

//        конструктор копирования часто является более гибким и понятным подходом,
//        так как дает явный контроль над процессом копирования, особенно для сложных объектов с вложенными структурами.

//        Метод clone() может быть полезен для простых классов, но требует тщательной реализации для глубоких копий,
//        что делает его менее удобным для использования в сложных сценариях.

        Hobby hobby = new Hobby("Скалолазание");
        Person person1 = new Person("John", 35);
        person1.addHobby(hobby);
        System.out.println("person1 исходный - " + person1.getHobbies());

        // Поверхностное или глубокое клонирование (там две реализации, нужную раскомментировать!!!)
        Person person2 = person1.clone();

        // Изменяем список хобби в клонированном объекте - старое хобби изменяем и добавляем новое
        person2.getHobbies().get(0).setName("Вышивание");
        person2.addHobby(new Hobby("Вязание"));

        // Смотрим списки хобби обоих объектов
        // при поверхностном клонировании список совершенно одинаковый
        // при глубоком - первый какой и был, изменения только во втором
        // (если вложенный объекты тоже клонировались, а не только сам список)
        System.out.println("person1 после клонирования - " + person1.getHobbies());
        System.out.println("person2 после клонирования - " + person2.getHobbies());


        // Глубокое копирование с помощью конструктора копирования
        Person person3 = new Person(person1);
        person3.getHobbies().get(0).setName("Собирание крышечек");
        person3.addHobby(new Hobby("Велосипедирование"));

        // Смотрим списки хобби обоих объектов
        // при использовании конструктора копирования изменения только во втором объекте
        // (если вложенный объекты тоже имеют конструктор копирования)
        System.out.println("person1 после копирования - " + person1.getHobbies());
        System.out.println("person3 после копирования - " + person3.getHobbies());
    }
}

